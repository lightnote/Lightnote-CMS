<?php

namespace Lightnote\Routing;

require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__) . '/../../../../../../src/htdocs/cms/library/Lightnote/Routing/Route.php';

/**
 * Test class for Route.
 * Generated by PHPUnit on 2010-10-02 at 05:57:20.
 */
class RouteTest extends \PHPUnit_Framework_TestCase
{

    /**
     *
     * @var \Lightnote\Mvc\RouteHandler
     */
    private $routeHandler;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $httpContext = new \Lightnote\Http\HttpContext();
        $httpContext->request = \Lightnote\Http\HttpRequest::getEmpty();
        $this->routeHandler = new \Lightnote\Mvc\RouteHandler($httpContext);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    public function testMatch()
    {


        $route = new Route(
            'category/abc-{language}-{country}/{controller}/{action}/{id}',
            $this->routeHandler,
            new RouteConfig(
                array(),
                array(
                    'controller' => 'DefaultController',
                    'action' => 'list',
                    'id' => null
                )
            )
        );

        $url = 'category/abc-de-DE';
        $this->assertTrue($route->match($url));
        $data = $route->getRouteData($url);
        $this->assertEquals($data['controller'], 'DefaultController');
        $this->assertEquals($data['action'], 'list');
        $this->assertEquals($data['country'], 'DE');
        $this->assertEquals($data['language'], 'de');

        $this->assertTrue(
            $route->match('category/abc-de-DE/MyController')
        );

        $this->assertTrue(
            $route->match('category/abc-de-DE/MyController/MyAction')
        );

        $url = 'category/abc-de-DE/MyController/myAction/someId';
        $this->assertTrue($route->match($url));
        $data = $route->getRouteData($url);
        $this->assertEquals($data['controller'], 'MyController');
        $this->assertEquals($data['action'], 'myAction');
        $this->assertEquals($data['country'], 'DE');
        $this->assertEquals($data['language'], 'de');
        $this->assertEquals($data['id'], 'someId');

        $this->assertFalse(
            $route->match('category/abc-de-DE/MyController/MyAction/someId/something')
        );
    }

    public function testMatchRoot()
    {
        $route = new Route('backend/', $this->routeHandler);
        $this->assertFalse($route->match('/'));
    }

    public function testCatchAll()
    {
        $route = new Route(
            'category/{test}/{*catchall}',
            $this->routeHandler,
            new RouteConfig(
                array(),
                array(
                    'controller' => 'DefaultController',
                    'action' => 'List'
                )
            )
        );

        $this->assertTrue($route->match('/category/myVal/bla/bla/bla'));

        $routeData = $route->getRouteData('/category/myVal/bla/bla/bla');
        $this->assertEquals($routeData['catchall'], 'bla/bla/bla');

        $this->assertTrue($route->match('/category/myVal'));
        $routeData = $route->getRouteData('/category/myVal');
        $this->assertEquals($routeData['catchall'], '');

    }

    public function testConstrains()
    {
        $route = new Route(
            'category/{id}',
            $this->routeHandler,
            new RouteConfig(
                array(),
                array(
                    'controller' => 'DefaultController',
                    'action' => 'List'
                ),
                array(
                    new Constrain\RegExpConstrain('id', '/^[0-9]+$/')
                )
            )
        );

        $this->assertTrue($route->match('category/123'));
        $this->assertFalse($route->match('category/123d'));
    }

    public function testExceptions()
    {
        try
        {
            $route = new Route(
                'category/{*id}/{test}',
                $this->routeHandler
            );
            $this->assertFalse(true);
        }
        catch(\Lightnote\Exception\System\ArgumentException $exc)
        {
            $this->assertFalse(false);
        }
        catch(Exception $exc)
        {
            $this->assertFalse(true);
        }

        try
        {
            $route = new Route(
                'category/{*id}/aaa',
                $this->routeHandler
            );
            $this->assertFalse(true);
        }
        catch(\Lightnote\Exception\System\ArgumentException $exc)
        {
            $this->assertFalse(false);
        }
        catch(Exception $exc)
        {
            $this->assertFalse(true);
        }


        try
        {
            $route = new Route(
                '~category',
                $this->routeHandler
            );
            $this->assertFalse(true);
        }
        catch(\Lightnote\Exception\System\ArgumentException $exc)
        {
            $this->assertFalse(false);
        }
        catch(Exception $exc)
        {
            $this->assertFalse(true);
        }

        try
        {
            $route = new Route(
                '/category',
                $this->routeHandler
            );
            $this->assertFalse(true);
        }
        catch(\Lightnote\Exception\System\ArgumentException $exc)
        {
            $this->assertFalse(false);
        }
        catch(Exception $exc)
        {
            $this->assertFalse(true);
        }
    }

}

?>
